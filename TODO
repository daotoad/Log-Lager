Before 1.0
  THEME: Make it work
    - Complete a reasonable amount of unit tests.
        IN PROGRESS
        Tests - send a message object with defined loglevel and other attributes.
        Verify calling sub in array and scalar contacts
        Test controlling output for sub and packages
        Test bad configurations where class loading fails.
        Test bad config with invalid log levels.
    - Update POD in modules
    - Message objects must be able to indicate a desire to have bits set by event handler.
    - Code changes only as needed.
  THEME: Custom message class
    - Allow specification of custom message class for log lager message objects.
    DONE
  THEME: Output methods refactored as pluggable classes.
    - Allow specification of output channel as a class.
    DONE
  THEME: Configuration separation
    - Make lexical configuration distinct from config file based configuration.
    - Lexical configuration should only be able to control lexical log level.
    - Everything else is controlled by config file / programmatic munging.
    DONE
    - Configuration clean up.
    - Unify and remove configuration cruft.
    DONE
After 1.0 -
  THEME: More injections.
    - Provide a Log::Lager object for use with packages that want to consume a log object.  Probably using Log::Any as an adapter.
    - Allow Messages to take callbacks? or objects for use as custom Formatters
    - Allow Messages to take callbacks? or objects for use as custom Emitters - DONE see Tap objects.
    - Allow Lager to provide default Formatter objects.
    - Allow Lager to provide default Emitter objects.  - DONE See Tap objects

Split configuration---DONE
    1. Some items belong in lexical config
        enable disable stack nostack fatal nonfatal pretty compact
    2. Other things do not.
        stderr file nolex syslog base package sub message
DONE

capture - 
    Provide interface for capturing data from handles and logging it.
    STDERR and other handle like things.
    DONE

Methods --
   add: get/set_base_level
   update: load_config_file
   incompatible: log_level : return computed loglevel as string
   add: dump_config : return config as string
    DONE

Config Format --
  JSON 
{
    levels => {
        base =>  'enable FEWTDIGU nonfatal FEWTDIGU fatal stack nostack FEWTDIGU pretty compact FEWTDIGU',
        package   => {
            'Package::Name' => 'enable FEWTDIGU nonfatal FEWTDIGU fatal stack nostack FEWTDIGU pretty compact FEWTDIGU',
        },

        sub   => {
            'Fully::Qualified::sub_name' => 'enable FEWTDIGU nonfatal FEWTDIGU fatal stack nostack FEWTDIGU pretty compact FEWTDIGU',
        },
    },

    event => {
        Log::Lager::Event::Standard => { whatever config needed },
    },

    tap => {
        Log::Lager::Tap::File => { file_name => 'foo' },
    },
    capture [
        {
        STDERR => { log_level => 'ERROR' },
        Handle => {},
    }


}


------------
DONE Rename "message" to "event" or something else.
DONE Make a serializer object / rename to formatter
Make a stack trace object
DONE Tweak standard event composition
    Maybe build from template array [ [field, field, ... ], { name => field, ... }, field, field, field ]
    How to show where STACK goes?  Just a normal field, I guess.



